#!/usr/bin/perl
use IO::Handle;
use POSIX qw(strftime);

#@DIRS=( "/backup-cg", "/backup-ads", "/backup-ims" );
@DIRS=( "backup-ads" );

sub human_sizestr {
  my $s=$_[0];
  my $sizestr;

  if($s<800) {
    $sizestr="${s}";
    $einh="b";
  }
  elsif($s<800000) {
    $sizestr=sprintf("%.4f", $s/1024);
    $einh="k";
  }
  elsif($s<800000000) {
    $sizestr=sprintf("%.4f", $s/(1024*1024));
    $einh="M";
  }
  else {
    $sizestr=sprintf("%.4f", $s/(1024*1024*1024));
    $einh="G";
  }
  $sizestr=substr($sizestr, 0, 4);
  if(substr($sizestr, 3, 1) eq ".") {
    $sizestr=" ".substr($sizestr, 0, 3);
  }
  $sizestr=$sizestr.$einh;

  return $sizestr;
}

sub process {
  my $dir=$_[0];
  my @content;
  my $file;
  my @st;
  my $res=0;
 
  if(-r "$dir/.do_not_change") {
    print LOG "Skipping $dir";
    LOG->autoflush(1);
    return $res;
  }

  opendir(DIR, "$dir");
  @content=grep { !/^\./ } readdir(DIR);
  closedir(DIR);

  foreach $file (@content) {
    @st=stat("$dir/$file");
    if(-d "$dir/$file") {
#      print "* $file\n"; 
      $res=1 if(process("$dir/$file")!=0);
      system("rmdir $dir/$file 2> /dev/null");
    }
#    elsif($st[9]+86400*16<=time()) {
#      print "File $dir/$file is old.\n" if($file !~ /\.content/);
#      system("rm $dir/$file");
#    }
    elsif("$file" =~ /\.tar$/) {

      if($write_string) {
#        print $write_string;
	$write_string=0;
      }

      open(LSOF, "lsof $dir/$file|");
      if(<LSOF>) {
#        print "Skipping $dir/$file\n";
      }
      else {
        $sizestr=human_sizestr($st[7]);
        print LOG "Compressing $dir/$file ";
        LOG->autoflush(1);
        $res=1;
        system("nice -n 15 tar tf $dir/$file > $dir/$file.content");
        print LOG "$sizestr ";
        $t=time();
        LOG->autoflush(1);
        open(ORIG, "<$dir/$file");
        open(ZIPPED, "|nice -n 15 gzip > $dir/$file.gz");
        $ges=0; $wrote=0; $size=$st[7];
        while(read(ORIG, $data, 1024*1024), length($data)) {
          print ZIPPED $data;
          ZIPPED->autoflush(1);
          $ges+=length($data);
          $size=0.51 if($size==0.5);
	  $size=0.01 if($size==0);
          while((5.0*$ges/$size-0.5)>$wrote) {
            print LOG "#";
            $wrote++;
            LOG->autoflush(1);
          }
        }
	close(ORIG);
        close(ZIPPED);
        $t=time()-$t;
        @st=stat("$dir/$file.gz");
        $sizestr=human_sizestr($st[7]);
        if($size>0) {
          $pro=int(100*$st[7]/$size);
        }
        else {
          $pro="-";
        }
        $t=1 if($t==0);
        $speed=sprintf("%.2f MB/min", (($size*60)/(1024.0*1024.0))/$t);
        print LOG " $sizestr ($pro%, $speed -> time=$t)\n";
        LOG->autoflush(1);
	system("touch -r $dir/$file $dir/$file.gz");
        system("rm $dir/$file");
      }
      close(LSOF);
    }
  }

  return $res;
}

$write_string=strftime("Backup-Start %a %b %e %H:%M:%S %Y\n", localtime(time));

## Do some work
foreach $backupdir (@DIRS) {
#  system("df /backup?");
  ## Checken, ob Process schon laeuft
  $topdir="/$backupdir";
  $file="$topdir/check_backup.pid";
  $do_work=1;
  if(-r $file) {
    open(F, "<$file");
    $apid=<F>;
    close(F);
  
    open(F, "ps -A | egrep \ *$apid \|");
    if(<F>) {
      $do_work=0;
    }
    else {
      system("rm $file");
    }
    close(F);
  }
  
  if($do_work) {
    ## PID-File erzeugen
    system("df /backup? > /var/log/check-$backupdir.log");
    open(LOG, ">>/var/log/check-$backupdir.log");
    open(F, ">$file");
    print F "$$";
    close(F);
    
    $xres=0;
    do {
      $res=process($topdir);
      $xres=1 if($res!=0);
    } 
    while($res!=0);

    system("df /backup? >> /var/log/check-$backupdir.log");
    close(LOG);
    if($res) {
      system("mail root -s \"CGA-Check-Backups $backupdir\" ".
             "< /var/log/check-$backupdir.log");
    }

    ## PID-File wieder entfernen
    system("rm $file");

  }
}

#system("df /backup?");

#print strftime("Backup-End %a %b %e %H:%M:%S %Y\n", localtime(time)) if($write_string==0);
